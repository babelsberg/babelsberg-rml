module Util:
  with "babelsberg.rml"

  relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value
  relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value
  relation should_short_circuit: (babelsberg.Op,babelsberg.Value) => (bool, babelsberg.Value)
end

relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value  =
  rule  id = id2
	------------------------------
	lookupEnv((id2,value) :: _, id) => value

  rule  not id=id2 & lookupEnv(rest, id) => value
	-------------------------------------
	lookupEnv((id2,_) :: rest, id)  => value
end

relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value =

 rule   x +. y => z
	-------------------------                             (* x+y *)
	apply_binop(babelsberg.ADD,babelsberg.REAL(x),babelsberg.REAL(y)) => (babelsberg.REAL(z))

 rule   x -. y => z
	-------------------------                             (* x-y *)
	apply_binop(babelsberg.SUB,babelsberg.REAL(x),babelsberg.REAL(y)) => (babelsberg.REAL(z))

 rule   x *. y => z
	-------------------------                             (* x*y *)
	apply_binop(babelsberg.MUL,babelsberg.REAL(x),babelsberg.REAL(y)) => (babelsberg.REAL(z))

 rule   x /. y => z
	------------------------                              (* x/y *)
	apply_binop(babelsberg.DIV,babelsberg.REAL(x),babelsberg.REAL(y)) => (babelsberg.REAL(z))

  (* reals *)
  rule  x <. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.LESSTHAN,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.TRUE

  rule  x <. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.LESSTHAN,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.FALSE

  rule  x <=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.LEQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.TRUE

  rule  x <=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.LEQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.FALSE

  rule  x ==. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.EQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.TRUE

  rule  x ==. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.EQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.FALSE

  rule  x >=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.GEQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.TRUE

  rule  x >=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.GEQUAL,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.FALSE

  rule  x >. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.GREATERTHAN,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.TRUE

  rule  x >. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.GREATERTHAN,babelsberg.REAL(x),babelsberg.REAL(y)) => babelsberg.FALSE

(* specials *)
  axiom apply_binop(babelsberg.EQUAL,babelsberg.TRUE,babelsberg.TRUE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.EQUAL,babelsberg.FALSE,babelsberg.FALSE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.EQUAL,babelsberg.NIL,babelsberg.NIL) => babelsberg.TRUE

(* generic *)
  axiom apply_binop(babelsberg.EQUAL,_,_) => babelsberg.FALSE

  axiom apply_binop(babelsberg.AND,babelsberg.TRUE,babelsberg.TRUE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.AND,babelsberg.TRUE,babelsberg.FALSE) => babelsberg.FALSE
  axiom apply_binop(babelsberg.AND,babelsberg.FALSE,babelsberg.TRUE) => babelsberg.FALSE
  axiom apply_binop(babelsberg.AND,babelsberg.FALSE,babelsberg.FALSE) => babelsberg.FALSE
  axiom apply_binop(babelsberg.OR,babelsberg.TRUE,babelsberg.TRUE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.OR,babelsberg.TRUE,babelsberg.FALSE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.OR,babelsberg.FALSE,babelsberg.TRUE) => babelsberg.TRUE
  axiom apply_binop(babelsberg.OR,babelsberg.FALSE,babelsberg.FALSE) => babelsberg.FALSE
end

relation should_short_circuit: (babelsberg.Op, babelsberg.Value) => (bool, babelsberg.Value) =
  axiom should_short_circuit(babelsberg.AND,babelsberg.TRUE) => (false, babelsberg.TRUE)
  axiom should_short_circuit(babelsberg.AND,babelsberg.FALSE) => (true, babelsberg.FALSE)
  axiom should_short_circuit(babelsberg.OR,babelsberg.TRUE) => (true, babelsberg.TRUE)
  axiom should_short_circuit(babelsberg.OR,babelsberg.FALSE) => (false, babelsberg.FALSE)
  axiom should_short_circuit(_,_) => (false, babelsberg.FALSE)
end
