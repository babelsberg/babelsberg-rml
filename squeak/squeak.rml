module squeak:
  with "../objects/babelsberg.rml"
  with "assertions.rml"

  relation printprogram: babelsberg.Program => ()
  relation printassert: babelsberg.Program => ()
end

relation printprogram: babelsberg.Program => () =
  rule	printPreamble() &
	printS(statement, "  ") &
	printPostscript()
	-----------------
	printprogram(babelsberg.PROGRAM(statement))
end

relation printassert: babelsberg.Program => () =
  rule	print "  self assert: " &
	printE(babelsberg.LVALUE(l)) & print " == " & printE(e) &
	print " value: " &
	print " '" & printE(babelsberg.LVALUE(l)) & print "'" &
	print " identicalTo: '" & printE(e) & print "'" &
	print ".\n"
	----------------------------------------
	printassert(babelsberg.PROGRAM(babelsberg.ASSIGN(l,babelsberg.DEREF(e))))

  rule	print "  self assert:" &
	printE(babelsberg.LVALUE(l)) & print " = " & printE(e) &
	print " variable: '" & printE(babelsberg.LVALUE(l)) & print "'" &
	print " equals: "  & printE(e) &
	print " butIs: "  & printE(babelsberg.LVALUE(l)) &
	print ".\n"
	----------------------------------------
	printassert(babelsberg.PROGRAM(babelsberg.ASSIGN(l,e)))
end

relation printPreamble: () => () =
  rule	print "test" & Assertions.exampleId() => s & print s & print "\n" &
	print "  | z3 |\n" &
	print "  z3 := ConstraintSolver newZ3Solver.\n"
	--------------------------------------------------
	printPreamble()
end

relation printPostscript: () => () =
  rule	print "!\n\n"
	--------------------------------------------------
	printPostscript()
end

relation printS: (babelsberg.Statement, string) => () =
  axiom printS(babelsberg.SKIP, i) => ()

  rule  printS(s1, i) & printS(s2, i)
	-----------------------
	printS(babelsberg.SEQ(s1,s2), i)

  rule	string_append(i, "  ") => i' &
	print i & print "(" & printE(e) & print ")\n" &
	print i' & print "ifTrue: [\n" &
	printS(s1, i') & print "]\n" &
	print i' & print "ifFalse: [\n" &
	printS(s2, i') & print "].\n"
	----------------------------------------------
	printS(babelsberg.IF(e, s1, s2), i)

  rule	string_append(i, "  ") => i' &
	print i & print "(" & printE(e) & print ") whileTrue: [\n" &
	printS(s, i') & print "].\n"
	-----------------------
	printS(babelsberg.WHILE(e, s), i)

  rule	print i & print "[" & printE(babelsberg.LVALUE(l)) & print ": " & printE(e) & print "]\n" &
	print i & print "  on: Error do: [:e | ctx unsat: true].\n" &
	Assertions.assert(2)
	---------------------------------------------------------
	printS(babelsberg.ASSIGN(l,e), i)

  rule  print i & print "[([" & printE(babelsberg.IDENTITY(e0, e1)) & print "] alwaysSolveWith: z3) disable]\n" &
	print i & print "  on: Error do: [:e | ctx unsat: true].\n"
	------------------------------------------------------------
	printS(babelsberg.ONCE(babelsberg.CONSTRAINT(babelsberg.REQUIRED, babelsberg.IDENTITY(e0, e1))), i)

  rule  print i & print "[[" & printE(babelsberg.IDENTITY(e0, e1)) & print "] alwaysSolveWith: z3]\n" &
	print i & print "  on: Error do: [:e | ctx unsat: true].\n"
	--------------------------------------------------------------
	printS(babelsberg.ALWAYS(babelsberg.CONSTRAINT(babelsberg.REQUIRED, babelsberg.IDENTITY(e0, e1))), i)

  rule	print i & print "[([" & printE(e) & print "] alwaysSolveWith: z3 \"priority: ConstraintPriority " & printRho(rho) & print "\") disable]\n" &
	print i & print "  on: Error do: [:e | ctx unsat: true].\n" &
	Assertions.assert(1)
	-------------------------
	printS(babelsberg.ONCE(babelsberg.CONSTRAINT(rho,e)), i)

  rule	print i & print "[[" & printE(e) & print "] alwaysSolveWith: z3 \"priority: ConstraintPriority " & printRho(rho) & print "\"]\n" &
	print i & print "  on: Error do: [:e | ctx unsat: true].\n" &
	Assertions.assert(1)
	-------------------------
	printS(babelsberg.ALWAYS(babelsberg.CONSTRAINT(rho,e)), i)
end

relation printE: babelsberg.Exp => () =
  rule	print "true"
	------------
	printE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE)))

  rule	print "false"
	------------
	printE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE)))

  rule	print "nil"
	------------
	printE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL)))

  rule	string_length(s) => i &
	i - 1 => li &
	string_list(s) => chars &
	list_delete(chars, li) => chars' &
	list_delete(chars', 0) => chars'' &
	list_string(chars'') => xs &
	print "'" & print xs & print "'"
	-------------------------------
	printE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(s))))

  rule	real_string(r) => s &
	print s
	-------
	printE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(r))))

  rule	string_length(x) => i &
	i - 1 => li &
	string_nth(x, li) => lst &
	lst = #"?" &
	string_list(x) => chars &
	list_delete(chars, li) => chars' &
	list_string(chars') => xs &
	print "ctx " & print xs & print " value"
	-------------------------------------
	printE(babelsberg.LVALUE(babelsberg.VARIABLE(x)))

  rule	print "ctx " & print x
	----------------------
	printE(babelsberg.LVALUE(babelsberg.VARIABLE(x)))

  rule	printE(e) & print " " & print l
	-------------------
	printE(babelsberg.LVALUE(babelsberg.FIELD(e, l)))

  rule	print "(" & printE(e1) & print ")" &
	printOp(op) &
	print "(" & printE(e2) & print ")" 
	-------------------------------------
	printE(babelsberg.OP(e1, op, e2))

  rule	print "(" & printE(e1) & print ")" &
	printComp(op) &
	print "(" & printE(e2) & print ")" 
	-------------------------------------
	printE(babelsberg.COMPARE(e1, op, e2))

  rule	print "(" & printE(e1) & print ")" &
	printComb(op) &
	print "[" & printE(e2) & print "]"
	-------------------------------------
	printE(babelsberg.COMBINE(e1, op, e2))

  rule	print "(" & printE(e1) & print ")" &
	print " == " &
	print "(" & printE(e2) & print ")"
	---------------------------------------
	printE(babelsberg.IDENTITY(e1, e2))

  rule	list_length(argexps) => i & i = 0 &
	printE(e) & print " " & print l
	-------------------------------------------
	printE(babelsberg.CALL(e,l,argexps))

  rule	print "(" & printE(e) & print " " & print l &
	print ": " & printEachArg(argexps) & print ")"
	-------------------------------------------
	printE(babelsberg.CALL(e,l,argexps))

  rule	print "(BabelsbergHRecord newFrom: {" & printFields(fieldexps) & print ")"
	---------------------------------------------------------
	printE(babelsberg.UIDRECORD(fieldexps))

  rule	print "(BabelsbergIRecord newFrom: {" & printFields(fieldexps) & print ")"
	---------------------------------------------------------------
	printE(babelsberg.IRECORD(fieldexps))
end

relation printEachArg: babelsberg.Exp list => () =
  axiom	printEachArg([]) => ()

  rule	printE(e)
	---------
	printEachArg(e :: [])

  rule	printE(e) & print " and: " &
	printEachArg(rest)
	------------------
	printEachArg(e :: rest)
end

relation printFields: babelsberg.ObjectLiteral => () =
  rule  print "}"
	---------
	printFields([])

  rule	print "#" & print l & print " -> (" & printE(e) & print ")}"
	--------------------------------
	printFields((l,e) :: [])

  rule  print "#" & print l & print " -> (" & printE(e) & print ")" &
	print ". " & printFields(rest)
	------------------------------
	printFields((l,e) :: rest)
end

relation printOp: babelsberg.Op => () =
  rule	print " + "
	-----------
	printOp(babelsberg.ADD)

  rule	print " - "
	-----------
	printOp(babelsberg.SUB)

  rule	print " / "
	-----------
	printOp(babelsberg.DIV)

  rule	print " * "
	-----------
	printOp(babelsberg.MUL)
end

relation printComp: babelsberg.Comp => () =
  rule	print " < "
	-----------
	printComp(babelsberg.LESSTHAN)

  rule	print " <= "
	-----------
	printComp(babelsberg.LEQUAL)

  rule	print " = "
	-----------
	printComp(babelsberg.EQUAL)

  rule	print " ~= "
	-----------
	printComp(babelsberg.NEQUAL)

  rule	print " >= "
	-----------
	printComp(babelsberg.GEQUAL)

  rule	print " > "
	-----------
	printComp(babelsberg.GREATERTHAN)
end

relation printComb: babelsberg.Comb => () =
  rule	print " and: "
	-----------
	printComb(babelsberg.AND)

  rule	print " or: "
	-----------
	printComb(babelsberg.OR)
end

relation printRho: babelsberg.Rho => () =
  rule	print "weak"
	--------------
	printRho(babelsberg.WEAK)

  rule	print "medium"
	--------------
	printRho(babelsberg.MEDIUM)

  rule	print "required"
	--------------
	printRho(babelsberg.REQUIRED)
end
