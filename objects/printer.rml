module Print:
  with "babelsberg.rml"
  with "solver.rml"

  relation printC: babelsberg.Constraint => string
  relation printE: babelsberg.Exp => string
  relation printZ3C: babelsberg.Constraint => string
  relation parseEnvironment: (babelsberg.Program list, babelsberg.Env, babelsberg.Heap) => (babelsberg.Env, babelsberg.Heap)

  relation pRefDom: babelsberg.Constraint => string
  relation pLabDom: babelsberg.Constraint => string
  relation pDefs: babelsberg.Constraint => string
end

relation parseEnvironment: (babelsberg.Program list, babelsberg.Env, babelsberg.Heap) => (babelsberg.Env, babelsberg.Heap) =
  axiom parseEnvironment([], E, H) => (E, H)

  rule parseEnvironment(rest, E, H) => (E', H') &
       printE(babelsberg.IRECORD(fields)) => vs &
       babelsberg.eval([],[],[],[],[],babelsberg.IRECORD(fields)) => (_,_,_,_,babelsberg.O(object)) &
       int_string(r) => rs &
       print "H(#" & print rs & print ")" & print " ||= " & print vs & print " \n"
       ------------------------------------------------
       parseEnvironment(babelsberg.PROGRAM(babelsberg.ASSIGN(babelsberg.ASSIGNDEREF(babelsberg.VALUE(babelsberg.R(r))), babelsberg.IRECORD(fields))) :: rest, E, H) => (E', (r, object) :: H')

  rule parseEnvironment(rest, E, H) => (E', H') &
       printE(babelsberg.IRECORD(fields)) => vs &
       babelsberg.eval([],[],[],[],[],babelsberg.IRECORD(fields)) => (_,_,_,_,object) &
       print x & print " ||= " & print vs & print " \n"
       ------------------------------------------------
       parseEnvironment(babelsberg.PROGRAM(babelsberg.ASSIGN(babelsberg.VARIABLE(x), babelsberg.IRECORD(fields))) :: rest, E, H) => ((x, object) :: E', H')
  
  rule parseEnvironment(rest, E, H) => (E', H') &
       printE(babelsberg.VALUE(v)) => vs &
       print x & print " ||= " & print vs & print " \n"
       ------------------------------------------------
       parseEnvironment(babelsberg.PROGRAM(babelsberg.ASSIGN(babelsberg.VARIABLE(x), babelsberg.VALUE(v))) :: rest, E, H) => ((x, v) :: E', H')
end

relation printZ3C: babelsberg.Constraint => string =
  rule printZ3E(e) => es &
       string_append_list(["\n(assert-soft ", es, " :weight 1)"]) => cs
       --------------
       printZ3C(babelsberg.CONSTRAINT(babelsberg.WEAK, e)) => cs

  rule printZ3E(e) => es &
       string_append_list(["\n(assert-soft ", es, " :weight 5)"]) => cs
       --------------
       printZ3C(babelsberg.CONSTRAINT(babelsberg.MEDIUM, e)) => cs

  rule printZ3E(e) => es &
       string_append_list(["\n(assert ", es, ")"]) => cs
       --------------
       printZ3C(babelsberg.CONSTRAINT(babelsberg.REQUIRED, e)) => cs

  rule printZ3C(c1) => c1s &
       printZ3C(c2) => c2s &
       c1s = "\n(assert (Bool true))"
       --------------
       printZ3C(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => c2s

  rule printZ3C(c1) => c1s &
       printZ3C(c2) => c2s &
       c2s = "\n(assert (Bool true))"
       --------------
       printZ3C(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => c1s

  rule printZ3C(c1) => c1s &
       printZ3C(c2) => c2s &
       string_append_list([c1s, c2s]) => cs
       ----------------------------------------------------------
       printZ3C(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs
end

relation printZ3E: babelsberg.Exp => string =
  axiom printZ3E(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => c

  rule real_string(c) => cs &
       string_append_list(["(Real ", cs, ")"]) => cs'
       ---------------------------------------
       printZ3E(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => cs'

  rule printFieldVar(x) => xs
       -----------------------
       printZ3E(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => xs

  rule int_string(r) => rs &
       string_append_list(["(Reference ref", rs, ")"]) => rs'
       ------------------------------------------------------
       printZ3E(babelsberg.VALUE(babelsberg.R(r))) => rs'

  rule printZ3E(e) => es &
       string_append("(H ", es) => es' & string_append(es', ")") => es''
       ----------------------------------------------------------------
       printZ3E(babelsberg.DEREF(e)) => es''

  rule printZ3RContents(ary) => s
       -----------------------------
       printZ3E(babelsberg.VALUE(babelsberg.O(ary))) => s

  rule printZ3RContents(ary) => s
       -----------------------------
       printZ3E(babelsberg.IRECORD(ary)) => s

  rule printZ3E(e) => es &
       string_append_list(["(select ", es, " ", l, ")"]) => es'
       --------------------------------------------------------
       printZ3E(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es'

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       printZ3Op(op) => os &
       string_append_list(["(", os, " ", e1s, " ", e2s, ")"]) => es
       ----------------------------------------------------------
       printZ3E(babelsberg.OP(e1, op, e2)) => es

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       printZ3Comp(op) => os &
       string_append_list(["(", os, " ", e1s, " ", e2s, ")"]) => es
       --------------------------------
       printZ3E(babelsberg.COMPARE(e1, op, e2)) => es

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       string_append_list(["(= ", e1s, " ", e2s, ")"]) => es'
       ------------------------------------------------------
       printZ3E(babelsberg.IDENTITY(e1, e2)) => es'

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       e1s = "(Bool true)"
       --------------------------------
       printZ3E(babelsberg.COMBINE(e1, op, e2)) => e2s

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       e2s = "(Bool true)"
       --------------------------------
       printZ3E(babelsberg.COMBINE(e1, op, e2)) => e1s

  rule printZ3E(e1) => e1s &
       printZ3E(e2) => e2s &
       printZ3Comb(op) => os &
       string_append_list(["(", os, " ", e1s, " ", e2s, ")"]) => es
       --------------------------------
       printZ3E(babelsberg.COMBINE(e1, op, e2)) => es

  axiom printZ3E(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => "(Bool true)"
  axiom printZ3E(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => "(Bool false)"
  axiom printZ3E(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => "(Reference nil)"

  rule  printZ3E(e) => es & string_append_list([es, ".", l, "(...)"]) => es'
	--------------------------------------------------------------
	printZ3E(babelsberg.CALL(e,l,elist)) => es'
end

relation printZ3RContents: babelsberg.ObjectLiteral => string =
  axiom printZ3RContents([]) => "iRec"

  rule printZ3E(e) => es &
       printZ3RContents(rest) => rests &
       string_append_list(["(store ", rests, " ", l, " ", es, ")"]) => str
       ----------------------------------------------------------
       printZ3RContents((l, e) :: rest) => str
end

relation printZ3Op: babelsberg.Op => string =
  axiom printZ3Op(babelsberg.ADD) => "+"
  axiom printZ3Op(babelsberg.SUB) => "-"
  axiom printZ3Op(babelsberg.DIV) => "/"
  axiom printZ3Op(babelsberg.MUL) => "*"
end

relation printZ3Comp: babelsberg.Comp => string =
  axiom printZ3Comp(babelsberg.LESSTHAN) =>"<"
  axiom printZ3Comp(babelsberg.LEQUAL) =>"<="
  axiom printZ3Comp(babelsberg.EQUAL) =>"="
  axiom printZ3Comp(babelsberg.NEQUAL) =>"!="
  axiom printZ3Comp(babelsberg.GEQUAL) =>">="
  axiom printZ3Comp(babelsberg.GREATERTHAN) =>">"
end

relation printZ3Comb: babelsberg.Comb => string =
  axiom printZ3Comb(babelsberg.AND) =>"and"
  axiom printZ3Comb(babelsberg.OR) =>"or"
end

relation pRefDom: babelsberg.Constraint => string =
  rule pRefDomE(e) => el &
       list_union(el, []) => cl &
       string_append_list(cl) => es &
       string_append_list(["(declare-datatypes () ((Reference invalid nil", es, ")))"]) => cs
       ---------------------------------------------------------------------------------------
       pRefDom(babelsberg.CONSTRAINT(_, e)) => cs

  rule pRefDomC(c1) => c1s &
       pRefDomC(c2) => c2s &
       list_union(c1s, c2s) => cl &
       string_append_list(cl) => cls &
       string_append_list(["(declare-datatypes () ((Reference invalid nil", cls, ")))"]) => cs
       ---------------------------------------------------------------------------------------------
       pRefDom(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs
end

relation pRefDomC: babelsberg.Constraint => string list =
  rule pRefDomE(e) => es
       ---------------
       pRefDomC(babelsberg.CONSTRAINT(_, e)) => es

  rule pRefDomC(c1) => c1s &
       pRefDomC(c2) => c2s &
       list_union(c1s, c2s) => cl
       ----------------------------------------------------------
       pRefDomC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cl
end

relation pRefDomE: babelsberg.Exp => string list =
  axiom pRefDomE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => [""]
  axiom pRefDomE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => [""]
  axiom pRefDomE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => [""]
  axiom pRefDomE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => [""]
  axiom pRefDomE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => [""]
  axiom pRefDomE(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => [""]

  rule int_string(r) => rs &
       string_append(" ref", rs) => rs'
       -----------------------------
       pRefDomE(babelsberg.VALUE(babelsberg.R(r))) => [rs']

  rule pRefDomE(e) => es
       ---------------
       pRefDomE(babelsberg.DEREF(e)) => es

  axiom pRefDomE(babelsberg.VALUE(babelsberg.O(ary))) => [""]
  axiom pRefDomE(babelsberg.IRECORD(ary)) => [""]

  rule pRefDomE(e) => es
       -------------------------------------------------------
       pRefDomE(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es

  rule pRefDomE(e1) => e1s &
       pRefDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       -----------------------------------------
       pRefDomE(babelsberg.OP(e1, op, e2)) => es

  rule pRefDomE(e1) => e1s &
       pRefDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pRefDomE(babelsberg.COMPARE(e1, op, e2)) => es

  rule pRefDomE(e1) => e1s &
       pRefDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pRefDomE(babelsberg.IDENTITY(e1, e2)) => es

  rule pRefDomE(e1) => e1s &
       pRefDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pRefDomE(babelsberg.COMBINE(e1, op, e2)) => es
end

relation pLabDom: babelsberg.Constraint => string =
  rule pLabDomE(e) => el &
       list_union(el, []) => cl &
       string_append_list(cl) => es &
       string_append_list(["(declare-datatypes () ((Label", es, ")))"]) => cs
       ---------------------------------------------------------------------------------------
       pLabDom(babelsberg.CONSTRAINT(_, e)) => cs

  rule pLabDomC(c1) => c1s &
       pLabDomC(c2) => c2s &
       list_union(c1s, c2s) => cl &
       string_append_list(cl) => cls &
       string_append_list(["(declare-datatypes () ((Label", cls, ")))"]) => cs
       ---------------------------------------------------------------------------------------------
       pLabDom(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs
end

relation pLabDomC: babelsberg.Constraint => string list =
  rule pLabDomE(e) => es
       ---------------
       pLabDomC(babelsberg.CONSTRAINT(_, e)) => es

  rule pLabDomC(c1) => c1s &
       pLabDomC(c2) => c2s &
       list_union(c1s, c2s) => cs
       ----------------------------------------------------------
       pLabDomC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs
end

relation pLabDomE: babelsberg.Exp => string list =
  axiom pLabDomE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => [""]
  axiom pLabDomE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => [""]
  axiom pLabDomE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => [""]
  axiom pLabDomE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => [""]
  axiom pLabDomE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => [""]
  axiom pLabDomE(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => [""]
  axiom pLabDomE(babelsberg.VALUE(babelsberg.R(r))) => [""]
  axiom pLabDomE(babelsberg.DEREF(e)) => [""]


  rule printLabContents(ary) => str
       ----------------------------
       pLabDomE(babelsberg.VALUE(babelsberg.O(ary))) => str

  rule printLabContents(ary) => str
       ----------------------------
       pLabDomE(babelsberg.IRECORD(ary)) => str

  rule pLabDomE(e) => es &
       string_append(" ", l) => ls &
       list_union(es, [ls]) => es'
       -------------------------------------------------------
       pLabDomE(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es'

  rule pLabDomE(e1) => e1s &
       pLabDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       -----------------------------------------
       pLabDomE(babelsberg.OP(e1, op, e2)) => es

  rule pLabDomE(e1) => e1s &
       pLabDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pLabDomE(babelsberg.COMPARE(e1, op, e2)) => es

  rule pLabDomE(e1) => e1s &
       pLabDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pLabDomE(babelsberg.IDENTITY(e1, e2)) => es

  rule pLabDomE(e1) => e1s &
       pLabDomE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pLabDomE(babelsberg.COMBINE(e1, op, e2)) => es
end

relation printLabContents: babelsberg.ObjectLiteral => string list =
  axiom printLabContents([]) => []

  rule pLabDomE(e) => es &
       printLabContents(rest) => rests &
       string_append(" ", l) => ls &
       list_union(es, [ls]) => fl &
       list_union(fl, rests) => str
       ----------------------------------------------------------
       printLabContents((l, e) :: rest) => str
end

relation pDefs: babelsberg.Constraint => string =
  rule pDefsE(e) => el &
       list_union(el, []) => cl &
       string_append_list(cl) => es
       ---------------
       pDefs(babelsberg.CONSTRAINT(_, e)) => es

  rule pDefsC(c1) => c1s &
       pDefsC(c2) => c2s &
       list_union(c1s, c2s) => cl &
       string_append_list(cl) => cls
       ------------------------------------
       pDefs(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cls
end

relation pDefsC: babelsberg.Constraint => string list =
  rule pDefsE(e) => el &
       list_union(el, []) => cl
       ---------------
       pDefsC(babelsberg.CONSTRAINT(_, e)) => cl

  rule pDefsC(c1) => c1s &
       pDefsC(c2) => c2s &
       list_union(c1s, c2s) => cl
       ------------------------------------
       pDefsC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cl
end

relation printFieldVar: string => string =
    (* workaround, so i don't have to update all solutions *)
  rule string_nth(x, 0) => fst &
       not fst = #"r" &
       string_list(x) => chars &
       list_getmember(#"_", chars) => _ &
       string_append("ref", x) => xs
       -----------------------
       printFieldVar(x) => xs

  axiom printFieldVar(x) => x
end

relation pDefsE: babelsberg.Exp => string list =
  axiom pDefsE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => [""]
  axiom pDefsE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => [""]
  axiom pDefsE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => [""]
  axiom pDefsE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => [""]
  axiom pDefsE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => [""]


  rule printFieldVar(x) => xs & string_append_list(["(declare-const ", xs, " (Value))\n"]) => str
       -------------------------------------------------------------------------------
       pDefsE(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => [str]

  axiom pDefsE(babelsberg.VALUE(babelsberg.R(r))) => [""]
  axiom pDefsE(babelsberg.DEREF(e)) => [""]

  rule printDefsContents(ary) => str
       ----------------------------
       pDefsE(babelsberg.VALUE(babelsberg.O(ary))) => str

  rule printDefsContents(ary) => str
       ----------------------------
       pDefsE(babelsberg.IRECORD(ary)) => str

  rule pDefsE(e) => es
       -------------------------------------------------------
       pDefsE(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es

  rule pDefsE(e1) => e1s &
       pDefsE(e2) => e2s &
       list_union(e1s, e2s) => es
       -----------------------------------------
       pDefsE(babelsberg.OP(e1, op, e2)) => es

  rule pDefsE(e1) => e1s &
       pDefsE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pDefsE(babelsberg.COMPARE(e1, op, e2)) => es

  rule pDefsE(e1) => e1s &
       pDefsE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pDefsE(babelsberg.IDENTITY(e1, e2)) => es

  rule pDefsE(e1) => e1s &
       pDefsE(e2) => e2s &
       list_union(e1s, e2s) => es
       --------------------------------
       pDefsE(babelsberg.COMBINE(e1, op, e2)) => es
end

relation printDefsContents: babelsberg.ObjectLiteral => string list =
  axiom printDefsContents([]) => []

  rule pDefsE(e) => es &
       printDefsContents(rest) => rests &
       list_union(es, rests) => str
       ----------------------------------------------------------
       printDefsContents((l, e) :: rest) => str
end

relation list_union: (''a list, ''a list) => ''a list =
  axiom list_union([],res) => res
  rule list_union_elt(x,lst2) => r1 &
	list_union(xs,r1) => res
	-----------------------
	list_union(x::xs,lst2) => res
end

relation list_union_elt: (''a , ''a list) => ''a list =
  rule list_getmember(x,lst) => _
	--------------------------
	list_union_elt(x,lst) => lst
  rule not list_getmember(x,lst) => _
	--------------------------
	list_union_elt(x,lst) => x::lst
end

relation list_getmember: (''a, ''a list) => ''a =
  axiom list_getmember(_,[]) => fail
  rule x = y
	-----
	list_getmember(x,y::ys) => y
  rule not x = y &
	list_getmember(x,ys) => res
	----------------------
	list_getmember(x,y::ys) => res
end

relation printC: babelsberg.Constraint => string =
  rule printE(e) => es &
       string_append("\nweak ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.WEAK, e)) => cs

  rule printE(e) => es &
       string_append("\nmedium ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.MEDIUM, e)) => cs

  rule printE(e) => es &
       string_append("\nrequired ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.REQUIRED, e)) => cs

  rule printC(c1) => c1s &
       printC(c2) => c2s &
       c1s = "\nrequired true"
       --------------
       printC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => c2s

  rule printC(c1) => c1s &
       printC(c2) => c2s &
       c2s = "\nrequired true"
       --------------
       printC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => c1s

  rule printC(c1) => c1s &
       printC(c2) => c2s &
       string_append(c1s, " && ") => cs &
       string_append(cs, c2s) => cs'
       --------------
       printC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs'
end

relation printE: babelsberg.Exp => string =
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => c

  rule real_string(c) => cs
       --------------------
       printE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => cs

  axiom printE(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => x

  rule int_string(r) => rs &
       string_append("#", rs) => rs'
       -----------------------------
       printE(babelsberg.VALUE(babelsberg.R(r))) => rs'

  rule printE(e) => es &
       string_append("H(", es) => es' & string_append(es', ")") => es''
       ----------------------------------------------------------------
       printE(babelsberg.DEREF(e)) => es''

  rule printRContents(ary) => s &
       string_append("{", s) => s' &
       string_append(s', "}") => s''
       -----------------------------
       printE(babelsberg.VALUE(babelsberg.O(ary))) => s''

  rule printRContents(ary) => s &
       string_append("{", s) => s' &
       string_append(s', "}") => s''
       -----------------------------
       printE(babelsberg.IRECORD(ary)) => s''

  rule printE(e) => es &
       string_append(es, ".") => es' &
       string_append(es', l) => es''
       -----------------------------
       printE(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es''

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printOp(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.OP(e1, op, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printComp(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.COMPARE(e1, op, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', " == ") => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.IDENTITY(e1, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       e1s = "true"
       --------------------------------
       printE(babelsberg.COMBINE(e1, op, e2)) => e2s

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       e2s = "true"
       --------------------------------
       printE(babelsberg.COMBINE(e1, op, e2)) => e1s

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printComb(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.COMBINE(e1, op, e2)) => es'

  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => "true"
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => "false"
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => "nil"

  rule  printE(e) => es & string_append_list([es, ".", l, "(...)"]) => es'
	--------------------------------------------------------------
	printE(babelsberg.CALL(e,l,elist)) => es'
end

relation printRContents: babelsberg.ObjectLiteral => string =
  axiom printRContents([]) => ""

  rule printE(e) => es &
       string_append(l, ": ") => ls &
       string_append(ls, es) => es' &
       string_append(es', ", ") => es'' &
       printRContents(rest) => rests &
       string_append(es'', rests) => str
       ----------------------------------------------------------
       printRContents((l, e) :: rest) => str
end

relation printOp: babelsberg.Op => string =
  axiom printOp(babelsberg.ADD) => " + "
  axiom printOp(babelsberg.SUB) => " - "
  axiom printOp(babelsberg.DIV) => " / "
  axiom printOp(babelsberg.MUL) => " * "
end

relation printComp: babelsberg.Comp => string =
  axiom printComp(babelsberg.LESSTHAN) => " < "
  axiom printComp(babelsberg.LEQUAL) => " <= "
  axiom printComp(babelsberg.EQUAL) => " = "
  axiom printComp(babelsberg.NEQUAL) => " != "
  axiom printComp(babelsberg.GEQUAL) => " >= "
  axiom printComp(babelsberg.GREATERTHAN) => " > "
end

relation printComb: babelsberg.Comb => string =
  axiom printComb(babelsberg.AND) => " and "
  axiom printComb(babelsberg.OR) => " or "
end
