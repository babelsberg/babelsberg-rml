module Print:
  with "babelsberg.rml"
  with "solver.rml"

  relation printC: babelsberg.Constraint => string
  relation printE: babelsberg.Exp => string
  relation parseEnvironment: (babelsberg.Program list, babelsberg.Env, babelsberg.Heap) => (babelsberg.Env, babelsberg.Heap)
end

relation parseEnvironment: (babelsberg.Program list, babelsberg.Env, babelsberg.Heap) => (babelsberg.Env, babelsberg.Heap) =
  axiom parseEnvironment([], E, H) => (E, H)

  rule parseEnvironment(rest, E, H) => (E', H') &
       printE(babelsberg.IRECORD(fields)) => vs &
       int_string(r) => rs &
       print "H(#" & print rs & print ")" & print " ||= " & print vs & print " \n"
       ------------------------------------------------
       parseEnvironment(babelsberg.PROGRAM(babelsberg.ASSIGN(babelsberg.ASSIGNDEREF(r), babelsberg.IRECORD(fields))) :: rest, E, H) => (E', (r, fields) :: H')
  
  rule parseEnvironment(rest, E, H) => (E', H') &
       printE(babelsberg.VALUE(v)) => vs &
       print x & print " ||= " & print vs & print " \n"
       ------------------------------------------------
       parseEnvironment(babelsberg.PROGRAM(babelsberg.ASSIGN(babelsberg.VARIABLE(x), babelsberg.VALUE(v))) :: rest, E, H) => ((x, v) :: E', H')
end

relation printC: babelsberg.Constraint => string =
  rule printE(e) => es &
       string_append("\nweak ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.WEAK, e)) => cs

  rule printE(e) => es &
       string_append("\nmedium ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.MEDIUM, e)) => cs

  rule printE(e) => es &
       string_append("\nrequired ", es) => cs
       --------------
       printC(babelsberg.CONSTRAINT(babelsberg.REQUIRED, e)) => cs

  rule printC(c1) => c1s &
       printC(c2) => c2s &
       string_append(c1s, " && ") => cs &
       string_append(cs, c2s) => cs'
       --------------
       printC(babelsberg.COMPOUNDCONSTRAINT(c1, c2)) => cs'
end

relation printE: babelsberg.Exp => string =
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.STRING(c)))) => c

  rule real_string(c) => cs
       --------------------
       printE(babelsberg.VALUE(babelsberg.K(babelsberg.REAL(c)))) => cs

  axiom printE(babelsberg.LVALUE(babelsberg.VARIABLE(x))) => x

  rule int_string(r) => rs &
       string_append("#", rs) => rs'
       -----------------------------
       printE(babelsberg.VALUE(babelsberg.R(r))) => rs'

  rule printE(babelsberg.VALUE(babelsberg.R(r))) => rs &
       string_append("H(", rs) => rs' & string_append(rs', ")") => rs''
       ----------------------------------------------------------------
       printE(babelsberg.DEREF(r)) => rs''

  rule printRContents(ary) => s &
       string_append("{", s) => s' &
       string_append(s', "}") => s''
       -----------------------------
       printE(babelsberg.VALUE(babelsberg.O(ary))) => s''

  rule printE(e) => es &
       string_append(es, ".") => es' &
       string_append(es', l) => es''
       -----------------------------
       printE(babelsberg.LVALUE(babelsberg.FIELD(e, l))) => es''

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printOp(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.OP(e1, op, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printComp(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.COMPARE(e1, op, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', " == ") => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.IDENTITY(e1, e2)) => es'

  rule printE(e1) => e1s &
       printE(e2) => e2s &
       printComb(op) => os &
       string_append("(", e1s) => e1s' &
       string_append(e2s, ")") => e2s' &
       string_append(e1s', os) => es &
       string_append(es, e2s') => es'
       --------------------------------
       printE(babelsberg.COMBINE(e1, op, e2)) => es'

  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))) => "true"
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.FALSE))) => "false"
  axiom printE(babelsberg.VALUE(babelsberg.K(babelsberg.NIL))) => "nil"
end

relation printRContents: babelsberg.ObjectLiteral => string =
  axiom printRContents([]) => ""

  rule printE(e) => es &
       string_append(l, ": ") => ls &
       string_append(ls, es) => es' &
       string_append(es', ", ") => es'' &
       printRContents(rest) => rests &
       string_append(es'', rests) => str
       ----------------------------------------------------------
       printRContents((l, e) :: rest) => str
end

relation printOp: babelsberg.Op => string =
  axiom printOp(babelsberg.ADD) => " + "
  axiom printOp(babelsberg.SUB) => " - "
  axiom printOp(babelsberg.DIV) => " / "
  axiom printOp(babelsberg.MUL) => " * "
end

relation printComp: babelsberg.Comp => string =
  axiom printComp(babelsberg.LESSTHAN) => " < "
  axiom printComp(babelsberg.LEQUAL) => " <= "
  axiom printComp(babelsberg.EQUAL) => " = "
  axiom printComp(babelsberg.NEQUAL) => " != "
  axiom printComp(babelsberg.GEQUAL) => " >= "
  axiom printComp(babelsberg.GREATERTHAN) => " > "
end

relation printComb: babelsberg.Comb => string =
  axiom printComb(babelsberg.AND) => " and "
  axiom printComb(babelsberg.OR) => " or "
end
