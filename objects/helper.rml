module Util:
  with "babelsberg.rml"

  relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value
  relation lookupScope: (babelsberg.Scope, babelsberg.Variable) => babelsberg.Variable
  relation lookupScopeEach: (babelsberg.Scope, babelsberg.Variable list) => babelsberg.Variable list
  relation lookupHeap: (babelsberg.Heap, babelsberg.Reference) => babelsberg.ObjectLiteral
  relation lookupRecord: (babelsberg.ObjectLiteral, babelsberg.Label) => babelsberg.Value
  relation lookupRecordType: ((babelsberg.Label * babelsberg.Type) list, babelsberg.Label) => babelsberg.Type

  relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value
  relation apply_bincomp: (babelsberg.Comp,babelsberg.Value,babelsberg.Value) => babelsberg.Value
  relation apply_bincomb: (babelsberg.Comb,babelsberg.Value,babelsberg.Value) => babelsberg.Value
  relation shortcircuit_bincomb: (babelsberg.Comb,babelsberg.Value) => (bool, babelsberg.Value)

  relation pairwiseEqualEach: (babelsberg.Variable list, babelsberg.Exp list) => babelsberg.Exp list
  relation combineEach: babelsberg.Exp list => babelsberg.Exp
end

relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value  =
  rule  id = id2
	------------------------------
	lookupEnv((id2,value) :: _, id) => value

  rule  string_append(id2, "?") => roid &
	roid = id
	------------------------------
	lookupEnv((id2,value) :: _, id) => value

  rule  not id=id2 &
	lookupEnv(rest, id) => value
	-------------------------------------
	lookupEnv((id2,_) :: rest, id)  => value
end

relation lookupScope: (babelsberg.Scope, babelsberg.Variable) => babelsberg.Variable  =
  rule  id = id2
	------------------------------
	lookupScope((id2,value) :: _, id) => value

  rule  string_append(id2, "?") => roid &
	roid = id &
	string_append(value, "?") => rovalue
	------------------------------
	lookupScope((id2,value) :: _, id) => rovalue

  rule  not id=id2 &
	lookupScope(rest, id) => value
	-------------------------------------
	lookupScope((id2,_) :: rest, id)  => value
end

relation lookupScopeEach: (babelsberg.Scope, babelsberg.Variable list) => babelsberg.Variable list =
  axiom lookupScopeEach(S,[]) => []

  rule	lookupScope(S,x) => xg &
	lookupScopeEach(S,rest) => grest
	--------------------------------
	lookupScopeEach(S,x :: rest) => (xg :: grest)
end

relation lookupHeap: (babelsberg.Heap, babelsberg.Reference) => babelsberg.ObjectLiteral  =
  rule  id = id2
	------------------------------
	lookupHeap((id2,o) :: _, id) => o

  rule  not id=id2 &
	lookupHeap(rest, id) => o
	-------------------------------------
	lookupHeap((id2,_) :: rest, id)  => o
end

relation lookupRecord: (babelsberg.ObjectLiteral, babelsberg.Label) => babelsberg.Value  =
  rule  id = id2
	------------------------------
	lookupRecord((id2, babelsberg.VALUE(value)) :: _, id) => value

  rule  not id=id2 &
	lookupRecord(rest, id) => value
	-------------------------------------
	lookupRecord((id2, _) :: rest, id)  => value
end

relation lookupRecordType: ((babelsberg.Label * babelsberg.Type) list, babelsberg.Label) => babelsberg.Type  =
  rule  id = id2
	------------------------------
	lookupRecordType((id2, T) :: _, id) => T

  rule  not id=id2 &
	lookupRecordType(rest, id) => T
	-------------------------------------
	lookupRecordType((id2, _) :: rest, id)  => T
end


relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value =

 rule   x +. y => z
	-------------------------                             (* x+y *)
	apply_binop(babelsberg.ADD,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => (babelsberg.K(babelsberg.REAL(z)))

 rule   x -. y => z
	-------------------------                             (* x-y *)
	apply_binop(babelsberg.SUB,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => (babelsberg.K(babelsberg.REAL(z)))

 rule   x *. y => z
	-------------------------                             (* x*y *)
	apply_binop(babelsberg.MUL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => (babelsberg.K(babelsberg.REAL(z)))

 rule   x /. y => z
	------------------------                              (* x/y *)
	apply_binop(babelsberg.DIV,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => (babelsberg.K(babelsberg.REAL(z)))
end

relation apply_bincomp: (babelsberg.Comp,babelsberg.Value,babelsberg.Value) => babelsberg.Value =
(* reals *)
  rule  x <. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_bincomp(babelsberg.LESSTHAN,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.TRUE)

  rule  x <. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_bincomp(babelsberg.LESSTHAN,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.FALSE)

  rule  x <=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_bincomp(babelsberg.LEQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.TRUE)

  rule  x <=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_bincomp(babelsberg.LEQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.FALSE)

  rule  x ==. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_bincomp(babelsberg.EQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.TRUE)

  rule  x ==. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_bincomp(babelsberg.EQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.FALSE)

  rule  x >=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_bincomp(babelsberg.GEQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.TRUE)

  rule  x >=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_bincomp(babelsberg.GEQUAL,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.FALSE)

  rule  x >. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_bincomp(babelsberg.GREATERTHAN,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.TRUE)

  rule  x >. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_bincomp(babelsberg.GREATERTHAN,babelsberg.K(babelsberg.REAL(x)),babelsberg.K(babelsberg.REAL(y))) => babelsberg.K(babelsberg.FALSE)

(* specials *)
  axiom apply_bincomp(babelsberg.EQUAL,babelsberg.K(babelsberg.TRUE),babelsberg.K(babelsberg.TRUE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomp(babelsberg.EQUAL,babelsberg.K(babelsberg.FALSE),babelsberg.K(babelsberg.FALSE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomp(babelsberg.EQUAL,babelsberg.K(babelsberg.NIL),babelsberg.K(babelsberg.NIL)) => babelsberg.K(babelsberg.TRUE)

(* generic *)
  axiom apply_bincomp(babelsberg.EQUAL,_,_) => babelsberg.K(babelsberg.FALSE)
end

relation apply_bincomb: (babelsberg.Comb,babelsberg.Value,babelsberg.Value) => babelsberg.Value =
  axiom apply_bincomb(babelsberg.AND,babelsberg.K(babelsberg.TRUE),babelsberg.K(babelsberg.TRUE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomb(babelsberg.AND,babelsberg.K(babelsberg.TRUE),babelsberg.K(babelsberg.FALSE)) => babelsberg.K(babelsberg.FALSE)
  axiom apply_bincomb(babelsberg.AND,babelsberg.K(babelsberg.FALSE),babelsberg.K(babelsberg.TRUE)) => babelsberg.K(babelsberg.FALSE)
  axiom apply_bincomb(babelsberg.AND,babelsberg.K(babelsberg.FALSE),babelsberg.K(babelsberg.FALSE)) => babelsberg.K(babelsberg.FALSE)
  axiom apply_bincomb(babelsberg.OR,babelsberg.K(babelsberg.TRUE),babelsberg.K(babelsberg.TRUE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomb(babelsberg.OR,babelsberg.K(babelsberg.TRUE),babelsberg.K(babelsberg.FALSE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomb(babelsberg.OR,babelsberg.K(babelsberg.FALSE),babelsberg.K(babelsberg.TRUE)) => babelsberg.K(babelsberg.TRUE)
  axiom apply_bincomb(babelsberg.OR,babelsberg.K(babelsberg.FALSE),babelsberg.K(babelsberg.FALSE)) => babelsberg.K(babelsberg.FALSE)
end

relation shortcircuit_bincomb: (babelsberg.Comb,babelsberg.Value) => (bool, babelsberg.Value) =
  axiom shortcircuit_bincomb(babelsberg.AND,babelsberg.K(babelsberg.TRUE)) => (false, babelsberg.K(babelsberg.TRUE))
  axiom shortcircuit_bincomb(babelsberg.AND,babelsberg.K(babelsberg.FALSE)) => (true, babelsberg.K(babelsberg.FALSE))
  axiom shortcircuit_bincomb(babelsberg.OR,babelsberg.K(babelsberg.TRUE)) => (true, babelsberg.K(babelsberg.TRUE))
  axiom shortcircuit_bincomb(babelsberg.OR,babelsberg.K(babelsberg.FALSE)) => (false, babelsberg.K(babelsberg.FALSE))
end


relation pairwiseEqualEach: (babelsberg.Variable list, babelsberg.Exp list) => babelsberg.Exp list =
  axiom pairwiseEqualEach([],[]) => []

  rule	pairwiseEqualEach(vrest,erest) => equalities
	--------------------------------------------
	pairwiseEqualEach(x :: vrest, e :: erest) => (babelsberg.COMPARE(babelsberg.LVALUE(babelsberg.VARIABLE(x)), babelsberg.EQUAL, e) :: equalities)
end

relation combineEach: babelsberg.Exp list => babelsberg.Exp =
  axiom combineEach([]) => babelsberg.VALUE(babelsberg.K(babelsberg.TRUE))

  rule combineEach(rest) => e
       ----------------------
       combineEach(e0 :: rest) => babelsberg.COMBINE(e0,babelsberg.AND,e)
end
