(* file assignment.rml *)

module babelsberg:
  (* Abstract syntax for the BabelsbergP language *)

  datatype Program = PROGRAM of Statement

  datatype Statement = SKIP
		     | ASSIGN of LValue * Exp
		     | NEWASSIGN of LValue * ObjectLiteral
		     | ALWAYS of Constraint
		     | ONCE of Constraint
		     | SEQ of Statement * Statement
		     | IF of Exp * Statement * Statement
		     | WHILE of Exp * Statement

  datatype Constraint = CONSTRAINT of Rho * Exp
		      | COMPOUNDCONSTRAINT of Constraint * Constraint

  datatype Rho = WEAK | MEDIUM | REQUIRED

  datatype Exp = VALUE of Value
	       | LVALUE of LValue
	       | OP of Exp * Op * Exp
	       | IDENTITY of LValue * LValue
	       | DEREF of Dereference
               | OBJECT of ObjectLiteral (* for constructing stay constraints *)

  datatype Op =  ADD | SUB | MUL | DIV | LESSTHAN | LEQUAL | EQUAL | NEQUAL | GEQUAL | GREATERTHAN | AND | OR

  datatype ObjectLiteral = O of (Label * Exp) list

  datatype LValue = VARIABLE of Variable
		  | FIELD of LValue * Label
                  | ASSIGNDEREF of Dereference (* just for the parsing of solver results *)

  datatype Constant = TRUE | FALSE | NIL | REAL of real | STRING of string

  type Variable = string

  type Label = string

  type Reference = int

  type Dereference = Exp

  datatype Value = C of Constant | R of Reference

(* Type syntax *)
  datatype Type = PRIMITIVE | TO of (Label * Type) list

(* Bindings and environments *)
type Env         = (Variable * Value) list
type Heap        = (Reference * ObjectLiteral) list
type Cstore      = Constraint
type Istore      = Constraint

relation evalprogram: Program => ()
relation eval: (Env, Heap, Exp) => Value
end

relation evalprogram: Program => () =
  rule  print "starting to evaluate\n" &
	step([], [], CONSTRAINT(REQUIRED, VALUE(C(TRUE))), CONSTRAINT(REQUIRED, VALUE(C(TRUE))), statement) => (Env, Heap, Cstore, Istore)
	-------------------------------------
	evalprogram(PROGRAM(statement))
end

relation eval: (Env, Heap, Exp) => Value =
  axiom eval(E, H, VALUE(C(c))) => C(c)

  rule  print "E-Var\n" &
	Util.lookupEnv(Env, x) => v
	----------------------
	eval(Env, Heap, LVALUE(VARIABLE(x))) => v

  rule  print "E-Field\n" &
	eval(Env, Heap, LVALUE(L)) => R(r) &
	Util.lookupHeap(Heap, r) => O(object) &
	Util.lookupObjectLiteral(object, l) => v
	----------------------------------------
	eval(Env, Heap, LVALUE(FIELD(L, l))) => v

  rule	eval(Env, Heap, e1) => v1 &
	Util.should_short_circuit(op,v1) => (true, v) &
	print "E-Op (short circuit)\n"
	------------------------------
	eval(Env, Heap, OP(e1, op, e2)) => v

  rule  print "E-Op\n" &
	eval(Env, Heap, e1) => v1 &
	eval(Env, Heap, e2) => v2 &
	Util.apply_binop(op,v1,v2) => v
	------------------------------
	eval(Env, Heap, OP(e1, op, e2)) => v

  rule  eval(Env, Heap, LVALUE(L1)) => v1 &
	eval(Env, Heap, LVALUE(L2)) => v2 &
	v1 = v2 &
	print "E-IdentityTrue\n"
	------------------------
	eval(Env, Heap, IDENTITY(L1, L2)) => C(TRUE)

  rule  eval(Env, Heap, LVALUE(L1)) => v1 &
	eval(Env, Heap, LVALUE(L2)) => v2 &
	not v1 = v2 &
	print "E-IdentityFalse\n"
	------------------------
	eval(Env, Heap, IDENTITY(L1, L2)) => C(FALSE)
end

relation typeExp: (Env, Heap, Exp) => Type =
  axiom typeExp(_, _, VALUE(C(REAL(c)))) => PRIMITIVE
  axiom typeExp(_, _, VALUE(C(TRUE))) => PRIMITIVE
  axiom typeExp(_, _, VALUE(C(FALSE))) => PRIMITIVE
  axiom typeExp(_, _, VALUE(C(NIL))) => PRIMITIVE
  axiom typeExp(_, _, VALUE(C(STRING(c)))) => PRIMITIVE

  rule  print "T-Ref\n" &
	Util.lookupHeap(Heap, r) => O(object) &
	typeObject(Env, Heap, object) => T
	--------------------------------------
	typeExp(Env, Heap, VALUE(R(r))) => T

  rule  print "T-Var\n" &
	eval(Env, Heap, LVALUE(VARIABLE(x))) => v &
	typeExp(Env, Heap, VALUE(v)) => T
	---------------------------------
	typeExp(Env, Heap, LVALUE(VARIABLE(x))) => T

  rule  print "T-Field\n" &
	typeExp(Env, Heap, LVALUE(L)) => TO(to) &
	Util.lookupObjectLiteralType(to, l) => T
	-----------------------------------------
	typeExp(Env, Heap, LVALUE(FIELD(L, l))) => T

  rule  print "T-Op\n" &
	typeExp(Env, Heap, e1) => PRIMITIVE &
	typeExp(Env, Heap, e2) => PRIMITIVE
	--------------------------
	typeExp(Env, Heap, OP(e1, op, e2)) => PRIMITIVE
end

relation typeObject: (Env, Heap, (Label * Exp) list) => Type =
	(* Helper rules to type the list of fields *)
  axiom typeObject(Env, Heap, []) => TO([])

  rule  typeExp(Env, Heap, e) => T &
	typeObject(Env, Heap, rest) => TO(ftypes) &
	list_append([(l, T)], ftypes) => ftypes'
	-------------------------------------------------------------------
	typeObject(Env, Heap, (l, e) :: rest) => TO(ftypes')
end

relation typeConstraint: (Env, Heap, Constraint) => () =
  rule  typeExp(Env, Heap, e) => T
	---------------------
	typeConstraint(Env, Heap, CONSTRAINT(rho, e))

  rule  typeConstraint(Env, Heap, C1) & typeConstraint(Env, Heap, C2)
	---------------------------------------------------
	typeConstraint(Env, Heap, COMPOUNDCONSTRAINT(C1, C2))
end

relation models: Constraint => (Env, Heap) =
  rule  Print.printC(Constraint) => Cs &
	Solver.solve(Cs) => El &
	Print.parseEnvironment(El, [], []) => (E, H) &
	print "\n"
	------------------------------
	models(Constraint) => (E, H)
end

relation stayVariable: (Variable, Value, Rho) => Constraint =
  axiom	stayVariable(x, C(c), rho) => CONSTRAINT(WEAK, OP(LVALUE(VARIABLE(x)), EQUAL, VALUE(C(c))))

  axiom	stayVariable(x, R(r), rho) => CONSTRAINT(rho, OP(LVALUE(VARIABLE(x)), EQUAL, VALUE(R(r))))
end

relation stayReference: (Reference, ObjectLiteral, Rho) => Constraint =
  axiom stayReference(r, O([]), rho) => COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(DEREF(VALUE(R(r))), EQUAL, OBJECT(O([])))), CONSTRAINT(REQUIRED, VALUE(C(TRUE))))

  rule	print "StayObject\n" &
	tick() => i & int_string(i) => i' & string_append("_x", i') => freshx &
	stayVariable(freshx, v, rho) => Cs &
	stayReference(r, O(rest), rho) => COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(DEREF(VALUE(R(r))), EQUAL, OBJECT(O(frest)))), Crest) &
	list_append([(l,LVALUE(VARIABLE(freshx)))], frest) => fields
	------------------------------------------------------------------------------------------------------------------------
	stayReference(r, O((l,VALUE(v)) :: rest), rho) => COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(DEREF(VALUE(R(r))), EQUAL, OBJECT(O(fields)))), COMPOUNDCONSTRAINT(Cs, Crest))
end

relation stayEnv: (Env, Rho) => Constraint =
  axiom stayEnv([], rho) => CONSTRAINT(REQUIRED, VALUE(C(TRUE)))
  rule	print "StayEnv\n" &
	stayEnv(E0, rho) => C0 &
	stayVariable(x, v, rho) => C1
	-------------------------------------------------
	stayEnv((x, v) :: E0, rho) => COMPOUNDCONSTRAINT(C0, C1)
end

relation stayHeap: (Heap, Rho) => Constraint =
  axiom stayHeap([], rho) => CONSTRAINT(REQUIRED, VALUE(C(TRUE)))
  rule	print "StayHeap\n" &
	stayHeap(H0, rho) => C0 &
	stayReference(r, o, rho) => C1
	-------------------------------------------------
	stayHeap((r, o) :: H0, rho) => COMPOUNDCONSTRAINT(C0, C1)
end

relation stayPrefix: (Env, Heap, LValue) => Constraint =
  axiom	stayPrefix(Env, Heap, VARIABLE(x)) => CONSTRAINT(REQUIRED, VALUE(C(TRUE)))

  rule	stayPrefixHelper(Env, Heap, L) => Cp
	-----------------------------------
	stayPrefix(Env, Heap, FIELD(L, l)) => Cp
end

relation stayPrefixHelper: (Env, Heap, LValue) => Constraint =
  rule  eval(Env, Heap, LVALUE(VARIABLE(x))) => R(r)
	----------------------------------------
	stayPrefixHelper(Env, Heap, VARIABLE(x)) => CONSTRAINT(REQUIRED, OP(LVALUE(VARIABLE(x)), EQUAL, VALUE(R(r))))

  rule	stayPrefixHelper(Env, Heap, L) => Cp &
	eval(Env, Heap, LVALUE(L)) => R(r0) &
	eval(Env, Heap, LVALUE(FIELD(L, l))) => R(r1)
	-----------------------------------
	stayPrefixHelper(Env, Heap, FIELD(L, l)) => COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(LVALUE(FIELD(ASSIGNDEREF(VALUE(R(r0))), l)), EQUAL, VALUE(R(r1)))), Cp)
end

relation stayPrefixIdent: (Env, Heap, Istore) => Constraint =
  axiom	stayPrefixIdent(Env, Heap, CONSTRAINT(REQUIRED, VALUE(C(TRUE)))) => CONSTRAINT(REQUIRED, VALUE(C(TRUE)))

  rule	stayPrefix(Env, Heap, L1) => C1 &
	stayPrefix(Env, Heap, L2) => C2 &
	stayPrefixIdent(Env, Heap, Ci) => C3
	------------------------------------
	stayPrefixIdent(Env, Heap, COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, IDENTITY(L1, L2)), Ci)) => COMPOUNDCONSTRAINT(C1, COMPOUNDCONSTRAINT(C2, C3))
end

relation translate: (Env, Heap, Constraint) => Constraint =	
  axiom	translate(e, h, CONSTRAINT(rho, VALUE(v))) => CONSTRAINT(rho, VALUE(v))

  axiom translate(e, h, CONSTRAINT(rho, LVALUE(VARIABLE(x)))) => CONSTRAINT(rho, LVALUE(VARIABLE(x)))

  rule	eval(e, h, LVALUE(VARIABLE(x))) => R(r)
	-----------------------------------------------------------------------------------
	translate(e, h, CONSTRAINT(rho, LVALUE(FIELD(VARIABLE(x), l)))) => CONSTRAINT(rho, LVALUE(FIELD(ASSIGNDEREF(LVALUE(VARIABLE(x))), l)))

  rule	eval(e, h, LVALUE(L)) => R(r) &
	translate(e, h, CONSTRAINT(rho, LVALUE(L))) => CONSTRAINT(rho, LVALUE(L'))
	-------------------------------------------------------------------------------------------------------------
	translate(e, h, CONSTRAINT(rho, LVALUE(FIELD(L, l)))) => CONSTRAINT(rho, LVALUE(FIELD(ASSIGNDEREF(LVALUE(L')), l)))

  rule	translate(e, h, CONSTRAINT(rho, e1)) => CONSTRAINT(rho, e1') &
	translate(e, h, CONSTRAINT(rho, e2)) => CONSTRAINT(rho, e2')
	--------------------------------------------------------------
	translate(e, h, CONSTRAINT(rho, OP(e1, op, e2))) => CONSTRAINT(rho, OP(e1', op, e2'))

  rule	translate(e, h, CONSTRAINT(rho, LVALUE(l1))) => CONSTRAINT(rho, LVALUE(l1')) &
	translate(e, h, CONSTRAINT(rho, LVALUE(l2))) => CONSTRAINT(rho, LVALUE(l2'))
	----------------------------------------------------------------------------
	translate(e, h, CONSTRAINT(rho, IDENTITY(l1, l2))) => CONSTRAINT(rho, OP(LVALUE(l1'), EQUAL, LVALUE(l2')))

  axiom translate(e, h, CONSTRAINT(rho, DEREF(r))) => CONSTRAINT(rho, DEREF(r))

  rule	translate(e, h, C0) => C0' &
	translate(e, h, C1) => C1'
	-------------------------
	translate(e, h, COMPOUNDCONSTRAINT(C0, C1)) => COMPOUNDCONSTRAINT(C0', C1')
end	

relation solve: (Env, Heap, Constraint, Rho) => (Env, Heap) =
  rule	stayEnv(E, rho) => Ce &
	stayHeap(H, rho) => Ch &
	translate(E, H, C0) => C' &
	models(COMPOUNDCONSTRAINT(C', COMPOUNDCONSTRAINT(Ce, Ch))) => (E', H')
	----------------------------------------------------------------------
	solve(E, H, C0, rho) => (E', H')
end

relation step: (Env, Heap, Cstore, Istore, Statement) => (Env, Heap, Cstore, Istore) =
  rule	print "S-Asgn\n" &
	eval(E, H, e) => v &
	stayPrefix(E, H, L) => Cl &
	stayPrefixIdent(E, H, I) => Ci &
	solve(E, H, COMPOUNDCONSTRAINT(Cl, COMPOUNDCONSTRAINT(Ci, COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(LVALUE(L), EQUAL, VALUE(v))), I))), WEAK) => (E', H') &
	typeConstraint(E', H', C0) &
	solve(E', H', COMPOUNDCONSTRAINT(Cl, COMPOUNDCONSTRAINT(Ci, COMPOUNDCONSTRAINT(CONSTRAINT(REQUIRED, OP(LVALUE(L), EQUAL, VALUE(v))), I))), REQUIRED) => (E'', H'')
	---------------------------------------------------------------------------------------
	step(E, H, C0, I, ASSIGN(L, e)) => (E'', H'', C0, I)

  rule  print "S-AsgnNew\n" &
	evalFields(E, H, O(fexps)) => O(fvalues) &
	not Util.lookupEnv(E, x) => _ &
	tick() => r & (* creates a unique integer *)
	list_append([(x, R(r))], E) => E' &
	list_append([(r, O(fvalues))], H) => H'
	--------------------------------------------------------------------
	step(E, H, C0, I, NEWASSIGN(VARIABLE(x), O(fexps))) => (E', H', C0, I)

  rule  print "S-OnceIdentity\n" &
	eval(E, H, LVALUE(L0)) => v0 &
	eval(E, H, LVALUE(L1)) => v1 &
	v0 = v1
	---------------------------------------------------------------
	step(E, H, C0, I, ONCE(CONSTRAINT(REQUIRED, IDENTITY(L0, L1)))) => (E, H, C0, I)

  rule  print "S-AlwaysIdentity\n" &
	step(E, H, C0, I, ONCE(CONSTRAINT(REQUIRED, IDENTITY(L0, L1)))) => (E, H, C0, I)
	---------------------------------------------------------------
	step(E, H, C0, I, ALWAYS(CONSTRAINT(REQUIRED, IDENTITY(L0, L1)))) => (E, H, C0, COMPOUNDCONSTRAINT(I, CONSTRAINT(REQUIRED, IDENTITY(L0, L1))))

  rule  print "S-Once\n" &
	typeConstraint(E, H, C0) &
	solve(E, H, COMPOUNDCONSTRAINT(C', C0), REQUIRED) => (E', H')
	------------------------------------------------------------
	step(E, H, C', I, ONCE(C0)) => (E', H', C', I)

  rule  step(E, H, C', I, ONCE(C0)) => (E', H', C', I)
	--------------------------------------------
	step(E, H, C', I, ALWAYS(C0)) => (E', H', COMPOUNDCONSTRAINT(C', C0), I)

  axiom step(E, H, C0, I, SKIP) => (E, H, C0, I)

  rule  print "S-SeqStep\n" &
	step(E, H, C0, I, s1) => (E', H', C', I') &
	step(E', H', C', I', s2) => (E'', H'', C'', I'')
	------------------------------------------------	
	step(E, H, C0, I, SEQ(s1, s2)) => (E'', H'', C'', I'')

  rule  eval(E, H, e) => C(TRUE) &
	print "S-IfThen\n" &
	step(E, H, C0, I, s1) => (E', H', C', I')
	----------------------------------------
	step(E, H, C0, I, IF(e, s1, s2)) => (E', H', C', I')

  rule  eval(E, H, e) => v &
	not v = C(TRUE) &
	print "S-IfElse\n" &
	step(E, H, C0, I, s2) => (E', H', C', I')
	----------------------------------------
	step(E, H, C0, I, IF(e, s1, s2)) => (E', H', C', I')

  rule  eval(E, H, e) => C(TRUE) &
	print "S-WhileDo\n" &
	step(E, H, C0, I, s) => (E', H', C', I') &
	step(E', H', C', I', WHILE(e, s)) => (E'', H'', C'', I'')
	-----------------------------------------------------
	step(E, H, C0, I, WHILE(e, s)) => (E'', H'', C'', I'')

  rule  eval(E, H, e) => v &
	not v = C(TRUE) &
	print "S-WhileSkip\n"
	-----------------------------------------------------
	step(E, H, C0, I, WHILE(e, s)) => (E, H, C0, I)
end

relation evalFields: (Env, Heap, ObjectLiteral) => ObjectLiteral =
	(* Helper rules to evaluate the list of fields *)
  axiom evalFields(Env, Heap, O([])) => O([])

  rule  eval(Env, Heap, e) => v &
	evalFields(Env, Heap, O(rest)) => O(fvalues) &
	list_append([(l, VALUE(v))], fvalues) => fvalues'
	----------------------------------------------------------------
	evalFields(Env, Heap, O((l, e) :: rest)) => O(fvalues')
end

with "solver.rml"
with "printer.rml"
with "helper.rml"
