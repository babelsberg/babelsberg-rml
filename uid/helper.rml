module Util:
  with "babelsberg.rml"

  relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value
  relation lookupHeap: (babelsberg.Heap, babelsberg.Reference) => babelsberg.ObjectLiteral
  relation lookupObjectLiteral: ((babelsberg.Label * babelsberg.Exp) list, babelsberg.Label) => babelsberg.Value
  relation lookupObjectLiteralType: ((babelsberg.Label * babelsberg.Type) list, babelsberg.Label) => babelsberg.Type
  relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value
  relation should_short_circuit: (babelsberg.Op,babelsberg.Value) => (bool, babelsberg.Value)
end

relation lookupEnv: (babelsberg.Env, babelsberg.Variable) => babelsberg.Value  =
  rule  id = id2
	------------------------------
	lookupEnv((id2,value) :: _, id) => value

  rule  not id=id2 &
	lookupEnv(rest, id) => value
	-------------------------------------
	lookupEnv((id2,_) :: rest, id)  => value
end

relation lookupHeap: (babelsberg.Heap, babelsberg.Reference) => babelsberg.ObjectLiteral  =
  rule  id = id2
	------------------------------
	lookupHeap((id2,value) :: _, id) => value

  rule  not id=id2 &
	lookupHeap(rest, id) => value
	-------------------------------------
	lookupHeap((id2,_) :: rest, id)  => value
end

relation lookupObjectLiteral: ((babelsberg.Label * babelsberg.Exp) list, babelsberg.Label) => babelsberg.Value  =
  rule  id = id2
	------------------------------
	lookupObjectLiteral((id2, babelsberg.VALUE(value)) :: _, id) => value

  rule  not id=id2 &
	lookupObjectLiteral(rest, id) => value
	-------------------------------------
	lookupObjectLiteral((id2, _) :: rest, id)  => value
end

relation lookupObjectLiteralType: ((babelsberg.Label * babelsberg.Type) list, babelsberg.Label) => babelsberg.Type  =
  rule  id = id2
	------------------------------
	lookupObjectLiteralType((id2, T) :: _, id) => T

  rule  not id=id2 &
	lookupObjectLiteralType(rest, id) => T
	-------------------------------------
	lookupObjectLiteralType((id2, _) :: rest, id)  => T
end


relation apply_binop: (babelsberg.Op,babelsberg.Value,babelsberg.Value) => babelsberg.Value =

 rule   x +. y => z
	-------------------------                             (* x+y *)
	apply_binop(babelsberg.ADD,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => (babelsberg.C(babelsberg.REAL(z)))

 rule   x -. y => z
	-------------------------                             (* x-y *)
	apply_binop(babelsberg.SUB,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => (babelsberg.C(babelsberg.REAL(z)))

 rule   x *. y => z
	-------------------------                             (* x*y *)
	apply_binop(babelsberg.MUL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => (babelsberg.C(babelsberg.REAL(z)))

 rule   x /. y => z
	------------------------                              (* x/y *)
	apply_binop(babelsberg.DIV,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => (babelsberg.C(babelsberg.REAL(z)))

  rule  x <. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.LESSTHAN,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.TRUE)

  rule  x <. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.LESSTHAN,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.FALSE)

  rule  x <=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.LEQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.TRUE)

  rule  x <=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.LEQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.FALSE)

  rule  x ==. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.EQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.TRUE)

  rule  x ==. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.EQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.FALSE)

  rule  x >=. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.GEQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.TRUE)

  rule  x >=. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.GEQUAL,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.FALSE)

  rule  x >. y => z &
	bool_eq(z, true) => true
	-------------------------
	apply_binop(babelsberg.GREATERTHAN,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.TRUE)

  rule  x >. y => z &
	bool_eq(z, false) => true
	-------------------------
	apply_binop(babelsberg.GREATERTHAN,babelsberg.C(babelsberg.REAL(x)),babelsberg.C(babelsberg.REAL(y))) => babelsberg.C(babelsberg.FALSE)

(* specials *)
  axiom apply_binop(babelsberg.EQUAL,babelsberg.C(babelsberg.TRUE),babelsberg.C(babelsberg.TRUE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.EQUAL,babelsberg.C(babelsberg.FALSE),babelsberg.C(babelsberg.FALSE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.EQUAL,babelsberg.C(babelsberg.NIL),babelsberg.C(babelsberg.NIL)) => babelsberg.C(babelsberg.TRUE)

(* generic *)
  axiom apply_binop(babelsberg.EQUAL,_,_) => babelsberg.C(babelsberg.FALSE)

  axiom apply_binop(babelsberg.AND,babelsberg.C(babelsberg.TRUE),babelsberg.C(babelsberg.TRUE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.AND,babelsberg.C(babelsberg.TRUE),babelsberg.C(babelsberg.FALSE)) => babelsberg.C(babelsberg.FALSE)
  axiom apply_binop(babelsberg.AND,babelsberg.C(babelsberg.FALSE),babelsberg.C(babelsberg.TRUE)) => babelsberg.C(babelsberg.FALSE)
  axiom apply_binop(babelsberg.AND,babelsberg.C(babelsberg.FALSE),babelsberg.C(babelsberg.FALSE)) => babelsberg.C(babelsberg.FALSE)
  axiom apply_binop(babelsberg.OR,babelsberg.C(babelsberg.TRUE),babelsberg.C(babelsberg.TRUE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.OR,babelsberg.C(babelsberg.TRUE),babelsberg.C(babelsberg.FALSE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.OR,babelsberg.C(babelsberg.FALSE),babelsberg.C(babelsberg.TRUE)) => babelsberg.C(babelsberg.TRUE)
  axiom apply_binop(babelsberg.OR,babelsberg.C(babelsberg.FALSE),babelsberg.C(babelsberg.FALSE)) => babelsberg.C(babelsberg.FALSE)
end


relation should_short_circuit: (babelsberg.Op, babelsberg.Value) => (bool, babelsberg.Value) =
  axiom should_short_circuit(babelsberg.AND,babelsberg.C(babelsberg.TRUE)) => (false, babelsberg.C(babelsberg.TRUE))
  axiom should_short_circuit(babelsberg.AND,babelsberg.C(babelsberg.FALSE)) => (true, babelsberg.C(babelsberg.FALSE))
  axiom should_short_circuit(babelsberg.OR,babelsberg.C(babelsberg.TRUE)) => (true, babelsberg.C(babelsberg.TRUE))
  axiom should_short_circuit(babelsberg.OR,babelsberg.C(babelsberg.FALSE)) => (false, babelsberg.C(babelsberg.FALSE))
  axiom should_short_circuit(_,_) => (false, babelsberg.C(babelsberg.FALSE))
end
